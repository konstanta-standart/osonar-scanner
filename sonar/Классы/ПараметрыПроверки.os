#Использовать v8metadata-reader

Перем Sonar_host_url Экспорт;
Перем Sonar_token Экспорт;
Перем ProjectName Экспорт;
Перем ProjectKey Экспорт;
Перем ProjectCatalog Экспорт;
Перем Src Экспорт;
Перем ProjectVersion Экспорт;
Перем EDT_Check Экспорт;
Перем EDT_version Экспорт;
Перем Debug_Scanner Экспорт;
Перем Debug_CI Экспорт;
Перем ExternalIssuesReportPaths Экспорт;
Перем ExternalIssuesReportSettings Экспорт;

Перем Лог;

Процедура ПриСозданииОбъекта(пЛог)
	
	Лог = пЛог;

	ЗаполнитьЗначенияПоУмолчанию();
	ЗаполнитьПараметрыПроектаПеременнымиСреды();
	ЗаполнитьПараметрыПроектаИзФайлаНастроек();
	
	отказ = Ложь;
	
	ПроверитьПараметр("sonar_host_url", отказ);
	ПроверитьПараметр("sonar_token", отказ, Истина);
	ПроверитьПараметр("projectName", отказ);
	ПроверитьПараметр("projectKey", отказ);
	ПроверитьПараметр("ProjectCatalog", отказ);
	
	Если отказ Тогда
		ЗавершитьРаботу(1);
	КонецЕсли;
	
	Src = ".\" + ProjectCatalog + "\src";
	ПроверитьПараметр("Src", отказ);
	
	ИнформацияОКонфигурации = Новый ИнформацияОКонфигурации(Src);
	
	projectVersion = ИнформацияОКонфигурации.ВерсияКонфигурации();
	
	Если Не ЗначениеЗаполнено(ProjectVersion) Тогда
		
		Лог.Ошибка("Не удалось получить версию конфигурации из каталога %1", Src);
		
	КонецЕсли;
	
	Если отказ Тогда
		ЗавершитьРаботу(1);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПоУмолчанию()
	
	sonar_host_url = "http://server-test:9000/";
	sonar_token = ПолучитьПеременнуюСреды("SONAR_TOKEN");
	projectName = ПолучитьПеременнуюСреды("CI_PROJECT_NAME");
	projectKey = "project_" + ПолучитьПеременнуюСреды("$CI_PROJECT_ID");
	ProjectCatalog = "";
	Src = "";
	projectVersion = "1.0.1.1";
	EDT_Check = Ложь;
	EDT_version = "2021.2.6";
	Debug_Scanner = Ложь;
	Debug_CI = Ложь;
	ExternalIssuesReportPaths = "";
	ExternalIssuesReportSettings = ".\gitlab_ci\sonar\settings.json";
	
КонецПроцедуры



Процедура ЗаполнитьПараметрыПроектаПеременнымиСреды()
	
	ЗаполнитьПараметрИзПеременнойСреды("sonar_host_url", "SONAR_HOST_URL");
	ЗаполнитьПараметрИзПеременнойСреды("projectName", "PROJECT_NAME");
	ЗаполнитьПараметрИзПеременнойСреды("projectKey", "PROJECT_KEY");
	ЗаполнитьПараметрИзПеременнойСреды("ProjectCatalog", "PROJECT_CATALOG");
	ЗаполнитьПараметрИзПеременнойСреды_Флаг("EDT_Check", "EDT_CHECK");
	ЗаполнитьПараметрИзПеременнойСреды("EDT_version", "EDT_VERSION");
	ЗаполнитьПараметрИзПеременнойСреды("ExternalIssuesReportSettings", "GENERIC_ISSUE_SETTINGS_JSON");
	ЗаполнитьПараметрИзПеременнойСреды_Флаг("Debug_Scanner", "DEBUG_SCANER"); // Сохранена опечатка для совместимости
	ЗаполнитьПараметрИзПеременнойСреды_Флаг("Debug_Scanner", "DEBUG_SCANNER"); // На случай исправления опечатки
	ЗаполнитьПараметрИзПеременнойСреды_Флаг("Debug_CI", "DEBUG_CI"); // На случай исправления опечатки
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыПроектаИзФайлаНастроек()
	
	параметрыИзФайла = ПрочитатьJSONФайл("./.project-settings.json");
	
	ЗаполнитьПараметрИзФайлаНастроек("ProjectCatalog", параметрыИзФайла["ProjectCatalog"]);
	
	параметрыСонара = параметрыИзФайла["Sonar"];
	
	Если Не параметрыСонара = Неопределено Тогда
		
		ЗаполнитьПараметрИзФайлаНастроек("sonar_host_url", параметрыСонара["HostUrl"]);
		ЗаполнитьПараметрИзФайлаНастроек("projectName", параметрыСонара["ProjectName"]);
		ЗаполнитьПараметрИзФайлаНастроек("projectKey", параметрыСонара["ProjectKey"]);
		ЗаполнитьПараметрИзФайлаНастроек("EDT_Check", параметрыСонара["EDT_Check"]);
		ЗаполнитьПараметрИзФайлаНастроек("EDT_version", параметрыСонара["EDT_version"]);
		ЗаполнитьПараметрИзФайлаНастроек("Debug_Scanner", параметрыСонара["Debug_Scanner"]);
		ЗаполнитьПараметрИзФайлаНастроек("ExternalIssuesReportSettings", параметрыСонара["ExternalIssuesReportSettings"]);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрИзПеременнойСреды(Знач ИмяПараметра, Знач ИмяПеременнойСреды, Знач СкрытьЗначение = Ложь)
	
	значениеПараметра = ПолучитьПеременнуюСреды(ИмяПеременнойСреды);
	
	Если ЗначениеЗаполнено(значениеПараметра) Тогда
		
		ЭтотОбъект[ИмяПараметра] = значениеПараметра;
		
		лог.Отладка("Параметр %1 заполнен из переменной среды = %2",
			ИмяПараметра,
			ПредставлениеПараметра(значениеПараметра, СкрытьЗначение));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрИзФайлаНастроек(Знач ИмяПараметра, Знач ЗначениеПараметра, Знач СкрытьЗначение = Ложь)
	
	Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
		
		ЭтотОбъект[ИмяПараметра] = ЗначениеПараметра;
		
		лог.Отладка("Параметр %1 заполнен из файла настроек = %2 (%3)",
			ИмяПараметра,
			ПредставлениеПараметра(ЗначениеПараметра, СкрытьЗначение),
			ТипЗнч(ЗначениеПараметра));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрИзПеременнойСреды_Флаг(Знач ИмяПараметра, Знач ИмяПеременнойСреды)
	
	значениеПараметра = ПолучитьПеременнуюСреды(ИмяПеременнойСреды);
	
	Если Не ЗначениеЗаполнено(значениеПараметра) Тогда
		Возврат;
	КонецЕсли;
	
	значениеПараметра = НРег(значениеПараметра) = "true" ИЛИ НРег(значениеПараметра) = "истина";
	
	ЭтотОбъект[ИмяПараметра] = значениеПараметра;
	
	лог.Отладка("Параметр %1 заполнен из переменной среды = %2", ИмяПараметра, ПредставлениеПараметра(значениеПараметра));
	
КонецПроцедуры

Функция ПрочитатьJSONФайл(Знач пИмяФайла)
	
	файл = Новый Файл(пИмяФайла);
	
	Если Не файл.Существует() Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	ЧтениеТекста = Новый ЧтениеТекста(пИмяФайла, "UTF-8");
	Лог.Отладка("Текст из файла настроек %1", пИмяФайла);
	Лог.Отладка(ЧтениеТекста.Прочитать());
	ЧтениеТекста.Закрыть();
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(пИмяФайла, "UTF-8");
	
	прочитанноеЗначение = ПрочитатьJSON(ЧтениеJSON, Истина);
	
	ЧтениеJSON.Закрыть();
	
	Возврат прочитанноеЗначение;
	
КонецФункции

Процедура ПроверитьПараметр(Знач ИмяПараметра, Отказ, Знач СкрытьЗначение = Ложь)
	
	значениеПараметра = ЭтотОбъект[ИмяПараметра];
	
	Если Не ЗначениеЗаполнено(значениеПараметра) Тогда
		
		Лог.Ошибка("Параметр %1 не заполнен.", ИмяПараметра);
		Отказ = Истина;
		
	Иначе
		
		Лог.Отладка("%1 = %2", ИмяПараметра, ПредставлениеПараметра(значениеПараметра, СкрытьЗначение));
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПредставлениеПараметра(Знач ЗначениеПараметра, Знач Скрывать = Ложь)
	
	Если Не ЗначениеЗаполнено(ЗначениеПараметра) Тогда
		
		представление = "<Пусто>";
		
	ИначеЕсли Скрывать Тогда
		
		представление = "";
		
		Для ц = 1 По СтрДлина(Строка(ЗначениеПараметра)) Цикл
			представление = представление + "*";
		КонецЦикла;
		
	Иначе
		
		представление = ЗначениеПараметра;
		
	КонецЕсли;
	
	Возврат представление;
	
КонецФункции