#Использовать cmdline
#Использовать 1commands
#Использовать v8metadata-reader
#Использовать logos
#Использовать tempfiles

Перем ЭтоПроверкаЗапросаНаСлияние; // Булево - Истина=Проверяется MR, иначе првоеряется ветка
Перем Лог; // Лог - класс логирования
Перем ПараметрыПроекта; // Структура - параметры анализируемого проекта

Процедура ВыполнитьКоманду()
	
	Лог = Логирование.ПолучитьЛог("oscript.app.k2-sonar-scanner");
	
	Лог.УстановитьУровень(УровниЛога.Отладка);
	
	Парсер = Новый ПарсерАргументовКоманднойСтроки();
	Парсер.ДобавитьПараметрФлаг("-mr");
	
	параметры = Парсер.Разобрать(АргументыКоманднойСтроки);
	
	ЭтоПроверкаЗапросаНаСлияние = параметры["-mr"];
	
	ИнициализироватьПараметрыПроекта();
	
	ВыполнитьПроверкуСПомощьюЕДТ();
	СонарСканер();
	
	ВременныеФайлы.Удалить();
	
КонецПроцедуры

#Область ПараметрыПроекта

Процедура СоздатьПараметрыПроекта()
	
	ПараметрыПроекта = Новый Структура;
	
	ПараметрыПроекта.Вставить("sonar_host_url", "http://server-test:9000/");
	ПараметрыПроекта.Вставить("sonar_token", ПолучитьПеременнуюСреды("SONAR_TOKEN"));
	ПараметрыПроекта.Вставить("projectName", ПолучитьПеременнуюСреды("CI_PROJECT_NAME"));
	ПараметрыПроекта.Вставить("projectKey", "project_" + ПолучитьПеременнуюСреды("$CI_PROJECT_ID"));
	ПараметрыПроекта.Вставить("ProjectCatalog", "");
	ПараметрыПроекта.Вставить("Src", "");
	ПараметрыПроекта.Вставить("projectVersion", "1.0.1.1");
	ПараметрыПроекта.Вставить("EDT_Check", Ложь);
	ПараметрыПроекта.Вставить("EDT_version", "2021.2.6");
	ПараметрыПроекта.Вставить("Debug_Scanner", Ложь);
	ПараметрыПроекта.Вставить("ExternalIssuesReportPaths", "");
	ПараметрыПроекта.Вставить("ExternalIssuesReportSettings", ".\gitlab_ci\sonar\settings.json");
	
КонецПроцедуры

Процедура ИнициализироватьПараметрыПроекта()
	
	СоздатьПараметрыПроекта();
	ЗаполнитьПараметрыПроектаПеременнымиСреды();
	ЗаполнитьПараметрыПроектаИзФайлаНастроек();
	
	отказ = Ложь;
	
	ПроверитьПараметр("sonar_host_url", отказ);
	ПроверитьПараметр("sonar_token", отказ, Истина);
	ПроверитьПараметр("projectName", отказ);
	ПроверитьПараметр("projectKey", отказ);
	ПроверитьПараметр("ProjectCatalog", отказ);
	
	Если отказ Тогда
		ЗавершитьРаботу(1);
	КонецЕсли;
	
	ПараметрыПроекта.Вставить("Src", ".\" + ПараметрыПроекта.ProjectCatalog + "\src");
	ПроверитьПараметр("Src", отказ);
	
	ИнформацияОКонфигурации = Новый ИнформацияОКонфигурации(ПараметрыПроекта.Src);
	
	ПараметрыПроекта.Вставить("projectVersion", ИнформацияОКонфигурации.ВерсияКонфигурации());
	
	Если Не ЗначениеЗаполнено(ПараметрыПроекта.projectVersion) Тогда
		
		Лог.Ошибка("Не удалось получить версию конфигурации из каталога %1", ПараметрыПроекта.Src);
		
	КонецЕсли;
	
	Если отказ Тогда
		ЗавершитьРаботу(1);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыПроектаПеременнымиСреды()
	
	ЗаполнитьПараметрИзПеременнойСреды("sonar_host_url", "SONAR_HOST_URL");
	ЗаполнитьПараметрИзПеременнойСреды("projectName", "PROJECT_NAME");
	ЗаполнитьПараметрИзПеременнойСреды("projectKey", "PROJECT_KEY");
	ЗаполнитьПараметрИзПеременнойСреды("ProjectCatalog", "PROJECT_CATALOG");
	ЗаполнитьПараметрИзПеременнойСреды_Флаг("EDT_Check", "EDT_CHECK");
	ЗаполнитьПараметрИзПеременнойСреды("EDT_version", "EDT_VERSION");
	ЗаполнитьПараметрИзПеременнойСреды("ExternalIssuesReportSettings", "GENERIC_ISSUE_SETTINGS_JSON");
	ЗаполнитьПараметрИзПеременнойСреды_Флаг("Debug_Scanner", "DEBUG_SCANER"); // Сохранена опечатка для совместимости
	ЗаполнитьПараметрИзПеременнойСреды_Флаг("Debug_Scanner", "DEBUG_SCANNER"); // На случай исправления опечатки
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыПроектаИзФайлаНастроек()
	
	параметрыИзФайла = ПрочитатьJSONФайл("./.project-settings.json");
	
	ЗаполнитьПараметрИзФайлаНастроек("ProjectCatalog", параметрыИзФайла["ProjectCatalog"]);
	
	параметрыСонара = параметрыИзФайла["Sonar"];
	
	Если Не параметрыСонара = Неопределено Тогда
		
		ЗаполнитьПараметрИзФайлаНастроек("sonar_host_url", параметрыСонара["HostUrl"]);
		ЗаполнитьПараметрИзФайлаНастроек("projectName", параметрыСонара["ProjectName"]);
		ЗаполнитьПараметрИзФайлаНастроек("projectKey", параметрыСонара["ProjectKey"]);
		ЗаполнитьПараметрИзФайлаНастроек("EDT_Check", параметрыСонара["EDT_Check"]);
		ЗаполнитьПараметрИзФайлаНастроек("EDT_version", параметрыСонара["EDT_version"]);
		ЗаполнитьПараметрИзФайлаНастроек("Debug_Scanner", параметрыСонара["Debug_Scanner"]);
		ЗаполнитьПараметрИзФайлаНастроек("ExternalIssuesReportSettings", параметрыСонара["ExternalIssuesReportSettings"]);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрИзПеременнойСреды(Знач ИмяПараметра, Знач ИмяПеременнойСреды, Знач СкрытьЗначение = Ложь)
	
	значениеПараметра = ПолучитьПеременнуюСреды(ИмяПеременнойСреды);
	
	Если ЗначениеЗаполнено(значениеПараметра) Тогда
		
		ПараметрыПроекта.Вставить(ИмяПараметра, значениеПараметра);
		
		лог.Отладка("Параметр %1 заполнен из переменной среды = %2", ИмяПараметра, ПредставлениеПараметра(значениеПараметра, СкрытьЗначение));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрИзФайлаНастроек(Знач ИмяПараметра, Знач ЗначениеПараметра, Знач СкрытьЗначение = Ложь)
	
	Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
		
		ПараметрыПроекта.Вставить(ИмяПараметра, ЗначениеПараметра);
		
		лог.Отладка("Параметр %1 заполнен из файла настроек = %2 (%3)",
			ИмяПараметра,
			ПредставлениеПараметра(ЗначениеПараметра, СкрытьЗначение),
			ТипЗнч(ЗначениеПараметра));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрИзПеременнойСреды_Флаг(Знач ИмяПараметра, Знач ИмяПеременнойСреды)
	
	значениеПараметра = ПолучитьПеременнуюСреды(ИмяПеременнойСреды);
	
	Если Не ЗначениеЗаполнено(значениеПараметра) Тогда
		Возврат;
	КонецЕсли;
	
	значениеПараметра = НРег(значениеПараметра) = "true" ИЛИ НРег(значениеПараметра) = "истина";
	
	ПараметрыПроекта.Вставить(ИмяПараметра, значениеПараметра);
	
	лог.Отладка("Параметр %1 заполнен из переменной среды = %2", ИмяПараметра, ПредставлениеПараметра(значениеПараметра));
	
КонецПроцедуры

Функция ПрочитатьJSONФайл(Знач пИмяФайла)
	
	файл = Новый Файл(пИмяФайла);
	
	Если Не файл.Существует() Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	ЧтениеТекста = Новый ЧтениеТекста(пИмяФайла, "UTF-8");
	Лог.Отладка("Текст из файла настроек %1", пИмяФайла);
	Лог.Отладка(ЧтениеТекста.Прочитать());
	ЧтениеТекста.Закрыть();

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(пИмяФайла, "UTF-8");
	
	прочитанноеЗначение = ПрочитатьJSON(ЧтениеJSON, Истина);
	
	ЧтениеJSON.Закрыть();
	
	Возврат прочитанноеЗначение;
	
КонецФункции

Процедура ПроверитьПараметр(Знач ИмяПараметра, Отказ, Знач СкрытьЗначение = Ложь)
	
	значениеПараметра = ПараметрыПроекта[ИмяПараметра];
	
	Если Не ЗначениеЗаполнено(значениеПараметра) Тогда
		
		Лог.Ошибка("Параметр %1 не заполнен.", ИмяПараметра);
		Отказ = Истина;
		
	Иначе
		
		Лог.Отладка("%1 = %2", ИмяПараметра, ПредставлениеПараметра(значениеПараметра, СкрытьЗначение));
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПредставлениеПараметра(Знач ЗначениеПараметра, Знач Скрывать = Ложь)
	
	Если Не ЗначениеЗаполнено(ЗначениеПараметра) Тогда
		
		представление = "<Пусто>";
		
	ИначеЕсли Скрывать Тогда
		
		представление = "";
		
		Для ц = 1 По СтрДлина(Строка(ЗначениеПараметра)) Цикл
			представление = представление + "*";
		КонецЦикла;
		
	Иначе
		
		представление = ЗначениеПараметра;
		
	КонецЕсли;
	
	Возврат представление;
	
КонецФункции

#КонецОбласти

#Область ЕДТ

Процедура ВыполнитьПроверкуСПомощьюЕДТ()
	
	Если Не ПараметрыПроекта.EDT_Check Тогда
		Возврат;
	КонецЕсли;
	
	каталогПроверки = ".\gitlab_ci\edt";
	
	каталог = Новый Файл(каталогПроверки);
	
	Если каталог.Существует() Тогда
		УдалитьФайлы(каталогПроверки, ПолучитьМаскуВсеФайлы());
	Иначе
		СоздатьКаталог(каталогПроверки);
	КонецЕсли;

	имяФайлаРезультата = каталогПроверки + "\edt.tsv";
	ПараметрыПроекта.ExternalIssuesReportPaths = каталогПроверки + "\edt.json";
	рабочаяОбласть = каталогПроверки + "\ws";

	СоздатьКаталог(рабочаяОбласть);
	
	каталогПроекта = Новый Файл(".\" + ПараметрыПроекта.ProjectCatalog);

	версияЕДТ = "";
	
	Если ЗначениеЗаполнено(ПараметрыПроекта.EDT_version) Тогда
		версияЕДТ = "@" + ПараметрыПроекта.EDT_version;
	КонецЕсли;
	
	Команда = Новый Команда;
	Команда.УстановитьСтрокуЗапуска(СтрШаблон("ring edt%1 workspace validate", версияЕДТ));
	Команда.ДобавитьПараметр("--workspace-location " + ОбернутьВКавычки(рабочаяОбласть));
	Команда.ДобавитьПараметр("--project-list " + ОбернутьВКавычки(каталогПроекта.ПолноеИмя));
	Команда.ДобавитьПараметр("--file " + ОбернутьВКавычки(имяФайлаРезультата));
	
	переменныеСреды = ПеременныеСреды();
	переменныеСреды.Вставить("RING_OPTS", "-Dfile.encoding=UTF-8 -Dosgi.nl=ru -Duser.language=ru");
	
	Команда.УстановитьПеременныеСреды(переменныеСреды);
	
	НачалоЗамера = ТекущаяДата();
	
	Команда.ПерехватыватьПотоки(Истина);
	Команда.ПоказыватьВыводНемедленно(Истина);

	Команда.Исполнить();
	
	Лог.Информация("Проверка ЕДТ завершена за %1с", Окр(ТекущаяДата() - НачалоЗамера));
	
	файлРезультата = Новый Файл(имяФайлаРезультата);
	
	Если Не файлРезультата.Существует() Тогда
		
		Лог.Ошибка("Ошибка проверки ЕДТ. Файл результата не создан.");
		ЗавершитьРаботу(1);
		
	КонецЕсли;
	
	Команда = Новый Команда;
	Команда.УстановитьСтрокуЗапуска("stebi");
	Команда.ДобавитьПараметр("convert");
	Команда.ДобавитьПараметр("-e");
	Команда.ДобавитьПараметр(ОбернутьВКавычки(имяФайлаРезультата));
	Команда.ДобавитьПараметр(ОбернутьВКавычки(ПараметрыПроекта.ExternalIssuesReportPaths));
	Команда.ДобавитьПараметр(ОбернутьВКавычки(ПараметрыПроекта.Src));
	
	НачалоЗамера = ТекущаяДата();
	
	Команда.ПерехватыватьПотоки(Истина);
	Команда.ПоказыватьВыводНемедленно(Истина);
	Команда.Исполнить();
	
	Лог.Информация("Конвертация результатов проверки ЕДТ завершена за %1с", Окр(ТекущаяДата() - НачалоЗамера));
	
	Команда = Новый Команда;
	Команда.УстановитьСтрокуЗапуска("stebi");
	Команда.ДобавитьПараметр("transform");
	Команда.ДобавитьПараметр(ОбернутьВКавычки(ПараметрыПроекта.ExternalIssuesReportPaths));
	Команда.ДобавитьПараметр("--src=" + ОбернутьВКавычки(ПараметрыПроекта.Src));
	Команда.ДобавитьПараметр("--settings=" + ОбернутьВКавычки(ПараметрыПроекта.ExternalIssuesReportSettings));
	Команда.ДобавитьПараметр("--remove_support=0");
	
	НачалоЗамера = ТекущаяДата();
	
	Команда.ПерехватыватьПотоки(Истина);
	Команда.ПоказыватьВыводНемедленно(Истина);
	Команда.Исполнить();
	
	Лог.Информация("Трансформация результатов проверки ЕДТ завершена за %1с", Окр(ТекущаяДата() - НачалоЗамера));
	
	УдалитьФайлы(имяФайлаРезультата);

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеПараметровСонара

Процедура СонарСканер()
	
	КомандаСканера = Новый Команда();
	
	КомандаСканера.УстановитьКоманду("sonar-scanner"); // берем из PATH
	
	ДобавитьВСонарПараметры_ПараметрыПроекта(КомандаСканера);
	ДобавитьВСонарПараметры_Общие(КомандаСканера);
	ДобавитьВСонарПараметры_ЗапросаНаСлияние(КомандаСканера);
	ДобавитьВСонарПараметры_ПроверкиВетки(КомандаСканера);
	ДобавитьВСонарПараметры_РезультатыПроверкиЕДТ(КомандаСканера);
	ДобавитьВСонарПараметры_Отладка(КомандаСканера);
	
	КомандаСканера.ПерехватыватьПотоки(Истина);
	КомандаСканера.ПоказыватьВыводНемедленно(Истина);
	КомандаСканера.УстановитьКодировкуВывода(КодировкаТекста.Системная);
	
	НачалоЗамера = ТекущаяДата();
	
	КомандаСканера.Исполнить();
	
	Лог.Информация("Работа сканера завершена за %1с", Окр(ТекущаяДата() - НачалоЗамера));
	
КонецПроцедуры

Процедура ДобавитьВСонарПараметры_ПараметрыПроекта(КомандаСканера)
	
	КомандаСканера.ДобавитьПараметр("-Dsonar.host.url=" + ПараметрыПроекта.sonar_host_url);
	КомандаСканера.ДобавитьПараметр("-Dsonar.login=" + ПараметрыПроекта.sonar_token);
	КомандаСканера.ДобавитьПараметр("-Dsonar.projectName=" + ПараметрыПроекта.projectName);
	КомандаСканера.ДобавитьПараметр("-Dsonar.projectKey=" + ПараметрыПроекта.projectKey);
	КомандаСканера.ДобавитьПараметр("-Dsonar.projectVersion=" + ПараметрыПроекта.projectVersion);
	КомандаСканера.ДобавитьПараметр("-Dsonar.sources=" + ПараметрыПроекта.Src);
	
КонецПроцедуры

Процедура ДобавитьВСонарПараметры_Общие(КомандаСканера)
	
	КомандаСканера.ДобавитьПараметр("-Dsonar.sourceEncoding=UTF-8");
	КомандаСканера.ДобавитьПараметр("-Dsonar.inclusions=**/*.bsl");
	КомандаСканера.ДобавитьПараметр("-Dsonar.bsl.languageserver.enabled=true");
	КомандаСканера.ДобавитьПараметр("-Dfile.encoding=UTF-8");
	КомандаСканера.ДобавитьПараметр("-Dsun.jnu.encoding=UTF8");
	КомандаСканера.ДобавитьПараметр("-Dsonar.qualitygate.wait=true");
	КомандаСканера.ДобавитьПараметр("-Dsonar.scm.exclusions.disabled=true");
	КомандаСканера.ДобавитьПараметр("-Dsonar.scm.enabled=true");
	КомандаСканера.ДобавитьПараметр("-Dsonar.scm.provider=git");
	
КонецПроцедуры

Процедура ДобавитьВСонарПараметры_ЗапросаНаСлияние(КомандаСканера)
	
	Если Не ЭтоПроверкаЗапросаНаСлияние Тогда
		Возврат;
	КонецЕсли;
	
	КомандаСканера.ДобавитьПараметр("-Dsonar.scm.revision=" + ПолучитьПеременнуюСреды("CI_COMMIT_SHA"));
	КомандаСканера.ДобавитьПараметр("-Dsonar.pullrequest.key=" + ПолучитьПеременнуюСреды("CI_MERGE_REQUEST_IID"));
	КомандаСканера.ДобавитьПараметр("-Dsonar.pullrequest.base=" + ИмяВетки("CI_MERGE_REQUEST_TARGET_BRANCH_NAME"));
	КомандаСканера.ДобавитьПараметр("-Dsonar.pullrequest.branch=" + ИмяВетки("CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"));
	
КонецПроцедуры

Процедура ДобавитьВСонарПараметры_ПроверкиВетки(КомандаСканера)
	
	Если ЭтоПроверкаЗапросаНаСлияние Тогда
		Возврат;
	КонецЕсли;
	
	КомандаСканера.ДобавитьПараметр("-Dsonar.branch.name=" + ИмяВетки("CI_COMMIT_REF_NAME"));
	
КонецПроцедуры

Процедура ДобавитьВСонарПараметры_РезультатыПроверкиЕДТ(КомандаСканера)
	
	Если Не ПараметрыПроекта.EDT_Check Тогда
		Возврат;
	КонецЕсли;
	
	КомандаСканера.ДобавитьПараметр("-Dsonar.ExternalIssuesReportPaths=" + ПараметрыПроекта.ExternalIssuesReportPaths);
	
КонецПроцедуры

Процедура ДобавитьВСонарПараметры_Отладка(КомандаСканера)
	
	Если Не ПараметрыПроекта.Debug_Scanner Тогда
		Возврат;
	КонецЕсли;
	
	КомандаСканера.ДобавитьПараметр("-X");
	
КонецПроцедуры

#КонецОбласти

#Область ИмяВетки

Функция ИмяВетки(Знач ИмяВеткиВПеременнойСреды)
	
	имяВетки = ПолучитьПеременнуюСреды(ИмяВеткиВПеременнойСреды);
	
	лог.Отладка("Имя ветки %1 = %2", ИмяВеткиВПеременнойСреды, имяВетки);
	
	имяВетки = ПерекодироватьИзДос(имяВетки);
	
	лог.Отладка("Имя ветки после перекодирования %1 = %2", ИмяВеткиВПеременнойСреды, имяВетки);
	
	Возврат имяВетки;
	
КонецФункции

Функция ПерекодироватьИзДос(Знач СтрокаВДос)
	
	ВремФайл = ВременныеФайлы.СоздатьФайл();
	
	ЗаписьТекста = Новый ЗаписьТекста(ВремФайл, КодировкаТекста.OEM);
	ЗаписьТекста.ЗаписатьСтроку(СтрокаВДос);
	ЗаписьТекста.Закрыть();
	
	ЧтениеТекста = Новый ЧтениеТекста(ВремФайл, КодировкаТекста.UTF8);
	строкаРезультат = ЧтениеТекста.ПрочитатьСтроку();
	ЧтениеТекста.Закрыть();
	
	Возврат строкаРезультат;
	
КонецФункции

#КонецОбласти

#Область ОбщегоНазначения

Функция ОбернутьВКавычки(Знач пСтрока) Экспорт
	
	Если Лев(пСтрока, 1) = """" И Прав(пСтрока, 1) = """" Тогда
		Возврат пСтрока;
	Иначе
		Возврат """" + пСтрока + """";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

ВыполнитьКоманду();