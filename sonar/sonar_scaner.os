#Использовать cmdline
#Использовать 1commands
#Использовать v8metadata-reader
#Использовать logos

Перем ЭтоПроверкаЗапросаНаСлияние; // Булево - Истина=Проверяется MR, иначе првоеряется ветка
Перем Лог; // Лог - класс логирования

Процедура ВыполнитьКоманду()
	
	Лог = Логирование.ПолучитьЛог("oscript.app.k2-sonar-scanner");
	
	Лог.УстановитьУровень(УровниЛога.Отладка);
	
	Парсер = Новый ПарсерАргументовКоманднойСтроки();
	Парсер.ДобавитьПараметрФлаг("-mr");
	
	параметры = Парсер.Разобрать(АргументыКоманднойСтроки);
	
	ЭтоПроверкаЗапросаНаСлияние = параметры["-mr"];
	
	СонарСканер();
	
КонецПроцедуры

#Область ПараметрыПроекта

Функция ПараметрыПроекта()
	
	параметрыСонара = Новый Структура;
	
	параметрыСонара.Вставить("sonar_host_url", ПолучитьПеременнуюСреды("SONAR_HOST_URL_CI"));
	параметрыСонара.Вставить("sonar_token", ПолучитьПеременнуюСреды("SONAR_TOKEN"));
	параметрыСонара.Вставить("projectName", ПолучитьПеременнуюСреды("PROJECT_NAME_CI"));
	параметрыСонара.Вставить("projectKey", ПолучитьПеременнуюСреды("PROJECT_KEY_CI"));
	параметрыСонара.Вставить("sources", ПолучитьПеременнуюСреды("SRC_CATALOG_CI"));
	
	отказ = Ложь;
	
	ПроверитьПараметр(параметрыСонара, "sonar_host_url", отказ);
	ПроверитьПараметр(параметрыСонара, "sonar_token", отказ, Истина);
	ПроверитьПараметр(параметрыСонара, "projectName", отказ);
	ПроверитьПараметр(параметрыСонара, "projectKey", отказ);
	ПроверитьПараметр(параметрыСонара, "sources", отказ);
	
	Если отказ Тогда
		ЗавершитьРаботу(1);
	КонецЕсли;
	
	ИнформацияоКонфигурации = Новый ИнформацияОКонфигурации(параметрыСонара.sources);
	
	параметрыСонара.Вставить("projectVersion", ИнформацияоКонфигурации.ВерсияКонфигурации());
	
	Если Не ЗначениеЗаполнено(параметрыСонара.projectVersion) Тогда
		
		Лог.Ошибка("Не удалось получить версию конфигурации из каталога %1", параметрыСонара.sources);
		
	КонецЕсли;
	
	Если отказ Тогда
		ЗавершитьРаботу(1);
	КонецЕсли;
	
	Возврат параметрыСонара;
	
КонецФункции

Процедура ПроверитьПараметр(Параметры, Знач ИмяПараметра, Отказ, Знач СкрытьЗначение = Ложь)
	
	значениеПараметра = Параметры[ИмяПараметра];
	
	Если СкрытьЗначение
		И ЗначениеЗаполнено(значениеПараметра) Тогда
		
		скрытоеЗначение = "";
		
		Для ц = 1 По СтрДлина(Строка(значениеПараметра)) Цикл
			скрытоеЗначение = скрытоеЗначение + "*";
		КонецЦикла;
		
		Лог.Отладка("%1=%2", ИмяПараметра, скрытоеЗначение);
		
	Иначе
		
		Лог.Отладка("%1=%2", ИмяПараметра, значениеПараметра);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(значениеПараметра) Тогда
		
		Лог.Ошибка("Параметр %1 не заполнен.", ИмяПараметра);
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеПараметровСонара

Процедура СонарСканер()
	
	КомандаСканера = Новый Команда();
	
	КомандаСканера.УстановитьКоманду("sonar-scanner"); // берем из PATH
	
	ДобавитьВСонарПараметры_ПараметрыПроекта(КомандаСканера);
	ДобавитьВСонарПараметры_Общие(КомандаСканера);
	ДобавитьВСонарПараметры_ЗапросаНаСлияние(КомандаСканера);
	ДобавитьВСонарПараметры_ПроверкиВетки(КомандаСканера);
	ДобавитьВСонарПараметры_РезультатыПроверкиЕДТ(КомандаСканера);
	ДобавитьВСонарПараметры_Отладка(КомандаСканера);
	
	ЗапуститьКоманду(КомандаСканера);
	
КонецПроцедуры

Процедура ДобавитьВСонарПараметры_ПараметрыПроекта(КомандаСканера)
	
	параметрыПроекта = ПараметрыПроекта();
	
	КомандаСканера.ДобавитьПараметр("-Dsonar.host.url=" + параметрыПроекта.sonar_host_url);
	КомандаСканера.ДобавитьПараметр("-Dsonar.login=" + параметрыПроекта.sonar_token);
	КомандаСканера.ДобавитьПараметр("-Dsonar.projectName=" + параметрыПроекта.projectName);
	КомандаСканера.ДобавитьПараметр("-Dsonar.projectKey=" + параметрыПроекта.projectKey);
	КомандаСканера.ДобавитьПараметр("-Dsonar.projectVersion=" + параметрыПроекта.projectVersion);
	КомандаСканера.ДобавитьПараметр("-Dsonar.sources=" + параметрыПроекта.sources);
	
КонецПроцедуры

Процедура ДобавитьВСонарПараметры_Общие(КомандаСканера)
	
	КомандаСканера.ДобавитьПараметр("-Dsonar.sourceEncoding=UTF-8");
	КомандаСканера.ДобавитьПараметр("-Dsonar.inclusions=**/*.bsl");
	КомандаСканера.ДобавитьПараметр("-Dsonar.bsl.languageserver.enabled=true");
	КомандаСканера.ДобавитьПараметр("-Dfile.encoding=UTF-8");
	КомандаСканера.ДобавитьПараметр("-Dsun.jnu.encoding=UTF8");
	КомандаСканера.ДобавитьПараметр("-Dsonar.qualitygate.wait=true");
	КомандаСканера.ДобавитьПараметр("-Dsonar.scm.exclusions.disabled=true");
	КомандаСканера.ДобавитьПараметр("-Dsonar.scm.enabled=true");
	КомандаСканера.ДобавитьПараметр("-Dsonar.scm.provider=git");
	
КонецПроцедуры

Процедура ДобавитьВСонарПараметры_ЗапросаНаСлияние(КомандаСканера)
	
	Если Не ЭтоПроверкаЗапросаНаСлияние Тогда
		Возврат;
	КонецЕсли;
	
	КомандаСканера.ДобавитьПараметр("-Dsonar.scm.revision=%CI_COMMIT_SHA%");
	КомандаСканера.ДобавитьПараметр("-Dsonar.pullrequest.key=%CI_MERGE_REQUEST_IID%");
	КомандаСканера.ДобавитьПараметр("-Dsonar.pullrequest.base=%CI_MERGE_REQUEST_TARGET_BRANCH_NAME%");
	КомандаСканера.ДобавитьПараметр("-Dsonar.pullrequest.branch=" + ИмяВетки("CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"));
	
КонецПроцедуры

Процедура ДобавитьВСонарПараметры_ПроверкиВетки(КомандаСканера)
	
	Если ЭтоПроверкаЗапросаНаСлияние Тогда
		Возврат;
	КонецЕсли;
	
	КомандаСканера.ДобавитьПараметр("-Dsonar.branch.name=" + ИмяВетки("CI_COMMIT_REF_NAME"));
	
КонецПроцедуры

Процедура ДобавитьВСонарПараметры_РезультатыПроверкиЕДТ(КомандаСканера)
	
	Если Не НРег(Строка(ПолучитьПеременнуюСреды("EDT_CHECK"))) = "true" Тогда
		Возврат;
	КонецЕсли;
	
	КомандаСканера.ДобавитьПараметр("-Dsonar.externalIssuesReportPaths=%GENERIC_ISSUE_JSON%");
	
КонецПроцедуры

Процедура ДобавитьВСонарПараметры_Отладка(КомандаСканера)
	
	Если Не НРег(Строка(ПолучитьПеременнуюСреды("DEBUG_SCANER"))) = "true" Тогда
		Возврат;
	КонецЕсли;
	
	КомандаСканера.ДобавитьПараметр("-X");
	
КонецПроцедуры

#КонецОбласти

#Область ИмяВетки

Функция ИмяВетки(Знач ИмяВеткиВПеременнойСреды)
	
	имяВетки = ПолучитьПеременнуюСреды(ИмяВеткиВПеременнойСреды);
	
	Если Не ЗначениеЗаполнено(имяВетки) Тогда
		
		Лог.Ошибка("Не удалось получить имя ветки из переменной среды %1", ИмяВеткиВПеременнойСреды);
		ЗавершитьРаботу(1);

	КонецЕсли;
	
	Возврат ВЮникод(имяВетки);

КонецФункции

Функция Из10в16(Знач пЧисло)
	
	Разрядность = 16;
	стр16Число = "";
	
	Пока пЧисло <> 0 Цикл
		
		Поз = пЧисло % Разрядность;
		стр16Число = Сред("0123456789ABCDEF", Поз + 1, 1) + стр16Число;
		пЧисло = Цел(пЧисло / Разрядность);
		
	КонецЦикла;
	
	Возврат стр16Число;
	
КонецФункции

Функция ВЮникод(Знач Строка)
	
	КодыСимволов = Новый Массив;
	КодыСимволов.Добавить(1105); // "ё"
	КодыСимволов.Добавить(1025); // "Ё"
	
	результат = "";
	
	Для Индекс = 1 По СтрДлина(Строка) Цикл
		
		символ = Сред(Строка, Индекс, 1);
		
		КодСимвола = КодСимвола(символ);
		
		Если (КодСимвола >= 1040 И КодСимвола <= 1103)
			ИЛИ Не КодыСимволов.Найти(КодСимвола) = Неопределено Тогда
			
			результат = результат + "\u0" + Из10в16(КодСимвола);
			
		Иначе
			
			результат = результат + символ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат результат;
	
КонецФункции


#КонецОбласти

#Область ОбщегоНазначения

Функция ЗапуститьКоманду(Знач Команда) Экспорт
	
	// Стандартная библиотека всегда перехватывает вывод

	ПутьПриложения = Команда.ПолучитьКоманду();
	ПутьПриложения = ОбернутьВКавычки(ПутьПриложения);
	
	СтрокаЗапуска = "";
	
	Для Каждого Параметр Из Команда.ПолучитьПараметры() Цикл
		
		СтрокаЗапуска = СтрокаЗапуска + " " + Параметр;
		
	КонецЦикла;
	
	СтрокаЗапуска = ПутьПриложения + СтрокаЗапуска;
	
	Лог.Отладка("Полная строка запуска <%1>", СтрокаЗапуска);
	
	Процесс = СоздатьПроцесс(строкаЗапуска, ".", Ложь, Ложь, , ПеременныеСреды());
	
	Процесс.Запустить();
	Процесс.ОжидатьЗавершения();

	Возврат Процесс;
	
КонецФункции

Функция ОбернутьВКавычки(Знач пСтрока) Экспорт
	
	Если Лев(пСтрока, 1) = """" И Прав(пСтрока, 1) = """" Тогда
		Возврат пСтрока;
	Иначе
		Возврат """" + пСтрока + """";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

ВыполнитьКоманду();